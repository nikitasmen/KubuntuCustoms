#!/usr/bin/env bash 

# clip is a script that allows you to copy the contents of a file to the clipboard 
# Pass as argument $1 the file name and $2 the number of lines to copy to the clipboard
# If $2 is not passed, the entire file will be copied to the clipboard 

#get the file name  
#get num of lines if want to copy only some lines

# Define help function first
show_help() {
    echo "Usage: clip <file> [-p path] [-l lines|-l start:end] [-h]"
    echo "-p: path to search for the file"
    echo "-l: specify lines to copy in one of these formats:"
    echo "    number       : copy first N lines"
    echo "    start:end    : copy lines from start to end (inclusive)"
    echo "-h: display this help message"
    echo "Copy the contents of a file to the clipboard."
    echo "If lines are not provided, the entire file will be copied."
    echo "The script will automatically search for files if only a name is provided"
    exit 0
}

# Show help when -h or --help is passed as the first argument
if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    show_help
fi

# Parse arguments
path=""
numOfLines=""


while getopts "hp:l:" opt; do
  case $opt in
    h) show_help ;;
    p) path="$OPTARG" ;;
    l) numOfLines="$OPTARG" ;;
    \?) echo "Invalid option: -$OPTARG" >&2; exit 1 ;;
  esac
done
shift $((OPTIND-1))
target=$1

# If no target specified after options processing, show error
if [ -z "$target" ]; then
    echo "Error: No file specified."
    show_help
fi

baseTarget=$(basename "$target")
if [ "$target" == "$baseTarget" ]; then 
    # If no path specified, search in current directory
    if [ -z "$path" ]; then
        path="."
    fi
    
    # Using find with read to get matching files
    found_files=()
    while IFS= read -r line; do
        found_files+=("$line")
    done < <(find "$path" -type f -name "$baseTarget")
    
    if [ ${#found_files[@]} -gt 0 ]; then
        echo "Found ${#found_files[@]} file(s)."
    fi
else 
    
    # Only try to get realpath if $3 is provided
    path1=$(dirname "$(realpath "$target" 2>/dev/null)" 2>/dev/null)
    if [ -n "$3" ]; then
        path=$(dirname "$(realpath "$3" 2>/dev/null)" 2>/dev/null)
    else
        path=""
    fi
    
    #find correct path
    if [ -d "$path1" ] && [ -d "$path" ]; then
        # Count slashes to determine depth
        slashes_path1=$(echo "$path1" | tr -cd '/' | wc -c)
        slashes_path=$(echo "$path" | tr -cd '/' | wc -c)

        if [ "$slashes_path1" -lt "$slashes_path" ]; then
            path=$path1
        fi
    else 
        if [ -d "$path1" ]; then 
            path=$path1
        elif [ ! -d "$path" ]; then 
            echo "Invalid path"
            exit 1
        fi
    fi

    # Using find with read to replace mapfile
    found_files=()
    while IFS= read -r line; do
        found_files+=("$line")
    done < <(find "$path" -type f -name "$baseTarget")
fi

# Check if more than one target exists
if [ ${#found_files[@]} -gt 1 ]; then
    echo "Multiple files found. Please choose one:"
    select option in "${found_files[@]}"; do
        if [ -n "$option" ]; then
            target=$option
            break
        else
            echo "Invalid choice. Please try again."
        fi
    done
elif [ ${#found_files[@]} -eq 1 ]; then
    target=${found_files[0]}
else
    echo "Target $target does not exist."
    exit 1
fi

# Check for clipboard command based on platform
# Try to use clipse first if available, then fall back to other clipboard managers
if command -v clipse >/dev/null 2>&1; then
    CLIP_CMD="clipse -c"
elif command -v pbcopy >/dev/null 2>&1; then
    CLIP_CMD="pbcopy"
elif command -v xclip >/dev/null 2>&1; then
    CLIP_CMD="xclip -selection clipboard"
elif command -v wl-copy >/dev/null 2>&1; then
    CLIP_CMD="wl-copy"
else
    echo "Error: No clipboard command found. Please install clipse, xclip (X11), wl-clipboard (Wayland), or use macOS."
    exit 1
fi

# Copy the contents of the file to the clipboard
# If numOfLines is specified, only copy that many lines
if [ -z "$numOfLines" ]; then
    # Copy entire file
    cat "$target" | $CLIP_CMD 
    echo "Contents of $target copied to clipboard."
else
    # Check if it's a range (contains a colon)
    if [[ "$numOfLines" == *:* ]]; then
        # Extract start and end line numbers
        start_line=$(echo "$numOfLines" | cut -d':' -f1)
        end_line=$(echo "$numOfLines" | cut -d':' -f2)
        
        # Validate start_line is a positive integer
        if ! [[ "$start_line" =~ ^[0-9]+$ ]]; then
            echo "Error: Start line must be a positive integer."
            exit 1
        fi
        
        # Validate end_line is a positive integer
        if ! [[ "$end_line" =~ ^[0-9]+$ ]]; then
            echo "Error: End line must be a positive integer."
            exit 1
        fi
        
        # Validate start_line <= end_line
        if [ "$start_line" -gt "$end_line" ]; then
            echo "Error: Start line must be less than or equal to end line."
            exit 1
        fi
        
        # Calculate number of lines to display
        num_lines=$((end_line - start_line + 1))
        
        # Use sed to extract the range of lines
        sed -n "${start_line},${end_line}p" "$target" | $CLIP_CMD
        echo "Lines ${start_line} to ${end_line} of $target copied to clipboard."
    else
        # Validate numOfLines is a positive integer
        if ! [[ "$numOfLines" =~ ^[0-9]+$ ]]; then
            echo "Error: Number of lines must be a positive integer."
            exit 1
        fi
        
        if [ "$numOfLines" -eq 0 ]; then
            cat "$target" | $CLIP_CMD
            echo "Contents of $target copied to clipboard."
        else
            head -n "$numOfLines" "$target" | $CLIP_CMD
            echo "First $numOfLines lines of $target copied to clipboard."
        fi
    fi
fi

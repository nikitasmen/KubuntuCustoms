#!/bin/bash 

# clip is a script that allows you to copy the contents of a file to the clipboard 
# Pass as argument $1 the file name and $2 the number of lines to copy to the clipboard
# If $2 is not passed, the entire file will be copied to the clipboard 

#get the file name  
#get num of lines if want to copy only some lines

#help 
if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    echo "Usage: clip <file> -p -lines -h"
    echo "-p: path to search for the file"
    echo "-lines: number of lines to copy to the clipboard"
    echo "-h: display this help message"
    echo "Copy the contents of a file to the clipboard."
    echo "If numOfLines is not provided, the entire file will be copied."
    echo "Dont bother with paths and stuff the script will ask later if needed" 
    exit 0
fi

while getopts "hp:l:" opt; do
  case $opt in
    h) show_help; exit 0 ;;
    p) path="$OPTARG" ;;
    l) numOfLines="$OPTARG" ;;
    \?) echo "Invalid option: -$OPTARG" >&2; exit 1 ;;
  esac
done
shift $((OPTIND-1))
target=$1

baseTarget=$(basename "$target")
if [ "$target" == "$baseTarget" ]; then 
    if [ "$2" == "-p" ]; then
        path=$3
        # Using find with read to replace mapfile
        found_files=()
        while IFS= read -r line; do
            found_files+=("$line")
        done < <(find "$path" -type f -name "$baseTarget")
    else
        # Using find with read to replace mapfile
        found_files=()
        while IFS= read -r line; do
            found_files+=("$line")
        done < <(find . -type f -name "$baseTarget")
        echo "Found files:" "${found_files[@]}"
    fi 
else 
    
    # Only try to get realpath if $3 is provided
    path1=$(dirname "$(realpath "$target" 2>/dev/null)" 2>/dev/null)
    if [ -n "$3" ]; then
        path=$(dirname "$(realpath "$3" 2>/dev/null)" 2>/dev/null)
    else
        path=""
    fi
    
    #find correct path
    if [ -d "$path1" ] && [ -d "$path" ]; then
        # Count slashes to determine depth
        slashes_path1=$(echo "$path1" | tr -cd '/' | wc -c)
        slashes_path=$(echo "$path" | tr -cd '/' | wc -c)

        if [ "$slashes_path1" -lt "$slashes_path" ]; then
            path=$path1
        fi
    else 
        if [ -d "$path1" ]; then 
            path=$path1
        elif [ ! -d "$path" ]; then 
            echo "Invalid path"
            exit 1
        fi
    fi

    # Using find with read to replace mapfile
    found_files=()
    while IFS= read -r line; do
        found_files+=("$line")
    done < <(find "$path" -type f -name "$baseTarget")
fi

# Check if more than one target exists
if [ ${#found_files[@]} -gt 1 ]; then
    echo "Multiple files found. Please choose one:"
    select option in "${found_files[@]}"; do
        if [ -n "$option" ]; then
            target=$option
            break
        else
            echo "Invalid choice. Please try again."
        fi
    done
elif [ ${#found_files[@]} -eq 1 ]; then
    target=${found_files[0]}
else
    echo "Target $target does not exist."
    exit 1
fi

# Check for clipboard command based on platform
if command -v pbcopy >/dev/null 2>&1; then
    CLIP_CMD="pbcopy"
elif command -v xclip >/dev/null 2>&1; then
    CLIP_CMD="xclip -selection clipboard"
else
    echo "Error: No clipboard command found. Please install xclip (Linux) or use macOS."
    exit 1
fi

# Copy the contents of the file to the clipboard
#or the first $lines lines of the file
# Copy each of the first $lines lines of the file to the clipboard in separate operations
if [ -z "$numOfLines" ] || [ "$numOfLines" -eq 0 ]; then
    cat "$target" | $CLIP_CMD 
    echo "Contents of $target copied to clipboard."
else
    head -n "$numOfLines" "$target" | $CLIP_CMD
    echo "First $numOfLines lines of $target copied to clipboard."
fi
